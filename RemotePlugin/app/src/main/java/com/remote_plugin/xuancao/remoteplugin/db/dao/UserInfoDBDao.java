package com.remote_plugin.xuancao.remoteplugin.db.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.remote_plugin.xuancao.remoteplugin.db.bean.UserInfoDB;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "USER_INFO_DB".
*/
public class UserInfoDBDao extends AbstractDao<UserInfoDB, Void> {

    public static final String TABLENAME = "USER_INFO_DB";

    /**
     * Properties of entity UserInfoDB.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property User_id = new Property(0, String.class, "user_id", false, "USER_ID");
        public final static Property Nick_name = new Property(1, String.class, "nick_name", false, "NICK_NAME");
        public final static Property Birthday = new Property(2, String.class, "birthday", false, "BIRTHDAY");
        public final static Property Avatar = new Property(3, String.class, "avatar", false, "AVATAR");
        public final static Property Gender = new Property(4, String.class, "gender", false, "GENDER");
        public final static Property Mobile = new Property(5, String.class, "mobile", false, "MOBILE");
    }


    public UserInfoDBDao(DaoConfig config) {
        super(config);
    }
    
    public UserInfoDBDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"USER_INFO_DB\" (" + //
                "\"USER_ID\" TEXT," + // 0: user_id
                "\"NICK_NAME\" TEXT," + // 1: nick_name
                "\"BIRTHDAY\" TEXT," + // 2: birthday
                "\"AVATAR\" TEXT," + // 3: avatar
                "\"GENDER\" TEXT," + // 4: gender
                "\"MOBILE\" TEXT);"); // 5: mobile
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"USER_INFO_DB\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, UserInfoDB entity) {
        stmt.clearBindings();
 
        String user_id = entity.getUser_id();
        if (user_id != null) {
            stmt.bindString(1, user_id);
        }
 
        String nick_name = entity.getNick_name();
        if (nick_name != null) {
            stmt.bindString(2, nick_name);
        }
 
        String birthday = entity.getBirthday();
        if (birthday != null) {
            stmt.bindString(3, birthday);
        }
 
        String avatar = entity.getAvatar();
        if (avatar != null) {
            stmt.bindString(4, avatar);
        }
 
        String gender = entity.getGender();
        if (gender != null) {
            stmt.bindString(5, gender);
        }
 
        String mobile = entity.getMobile();
        if (mobile != null) {
            stmt.bindString(6, mobile);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, UserInfoDB entity) {
        stmt.clearBindings();
 
        String user_id = entity.getUser_id();
        if (user_id != null) {
            stmt.bindString(1, user_id);
        }
 
        String nick_name = entity.getNick_name();
        if (nick_name != null) {
            stmt.bindString(2, nick_name);
        }
 
        String birthday = entity.getBirthday();
        if (birthday != null) {
            stmt.bindString(3, birthday);
        }
 
        String avatar = entity.getAvatar();
        if (avatar != null) {
            stmt.bindString(4, avatar);
        }
 
        String gender = entity.getGender();
        if (gender != null) {
            stmt.bindString(5, gender);
        }
 
        String mobile = entity.getMobile();
        if (mobile != null) {
            stmt.bindString(6, mobile);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public UserInfoDB readEntity(Cursor cursor, int offset) {
        UserInfoDB entity = new UserInfoDB( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // user_id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // nick_name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // birthday
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // avatar
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // gender
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // mobile
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, UserInfoDB entity, int offset) {
        entity.setUser_id(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setNick_name(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setBirthday(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setAvatar(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setGender(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setMobile(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(UserInfoDB entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(UserInfoDB entity) {
        return null;
    }

    @Override
    public boolean hasKey(UserInfoDB entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
